[{"C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\index.js":"1","C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\Routes.js":"2","C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\core\\Notfound.js":"3","C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\core\\Dashboard.js":"4","C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\user\\Signin.js":"5","C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\user\\Signup.js":"6","C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\core\\Home.js":"7","C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\core\\Layout.js":"8","C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\user\\Showflow.js":"9","C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\user\\apiHelper.js":"10","C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\auth\\index.js":"11","C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\core\\Menu.js":"12","C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\config.js":"13","C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\react-flow-renderer\\index.jsx":"14","C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\react-flow-renderer\\apiUser.js":"15","C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\react-flow-renderer\\Nodes.jsx":"16","C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\user\\Displayflow.js":"17"},{"size":227,"mtime":1644571679561,"results":"18","hashOfConfig":"19"},{"size":1319,"mtime":1644655442634,"results":"20","hashOfConfig":"19"},{"size":511,"mtime":1644571679560,"results":"21","hashOfConfig":"19"},{"size":1023,"mtime":1644602137200,"results":"22","hashOfConfig":"19"},{"size":3262,"mtime":1644760076463,"results":"23","hashOfConfig":"19"},{"size":4743,"mtime":1644765792739,"results":"24","hashOfConfig":"19"},{"size":2240,"mtime":1644643296297,"results":"25","hashOfConfig":"19"},{"size":948,"mtime":1644760240243,"results":"26","hashOfConfig":"19"},{"size":1686,"mtime":1644655616910,"results":"27","hashOfConfig":"19"},{"size":980,"mtime":1644655697437,"results":"28","hashOfConfig":"19"},{"size":1935,"mtime":1644571679557,"results":"29","hashOfConfig":"19"},{"size":3054,"mtime":1644766977561,"results":"30","hashOfConfig":"19"},{"size":49,"mtime":1644571970625,"results":"31","hashOfConfig":"19"},{"size":7284,"mtime":1644763955661,"results":"32","hashOfConfig":"19"},{"size":457,"mtime":1644583039006,"results":"33","hashOfConfig":"19"},{"size":2792,"mtime":1644679425311,"results":"34","hashOfConfig":"19"},{"size":6438,"mtime":1644663977373,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"sdivk3",{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"38"},"C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\index.js",[],["73","74"],"C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\Routes.js",[],"C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\core\\Notfound.js",[],"C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\core\\Dashboard.js",[],"C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\user\\Signin.js",[],"C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\user\\Signup.js",["75","76"],"C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\core\\Home.js",["77","78"],"import Layout from \"./Layout\"\r\nimport { isAuthenticated } from '../auth'\r\nimport { getCategories,getFlows} from \"../user/apiHelper\";\r\nimport { useEffect,useState } from \"react\";\r\nconst Home = () => {\r\n    const [categories, setCategories] = useState(false)\r\n    const [flowcharts, setFlowcharts] = useState(false)\r\n    const [currentFlowChart, setCurrentFlowChart] = useState([])\r\n    const init = () => {\r\n        getCategories().then(data => {\r\n            if (data.error) {\r\n                console.log(\"error occured\")\r\n            } else {\r\n                \r\n                let mySet1 = new Set()\r\n                data.map((d, i) => {\r\n                    // console.log(d.category)\r\n                    mySet1.add(d.category)\r\n                })\r\n                const array = [...mySet1];\r\n                setCategories(array)\r\n            }\r\n        })\r\n\r\n        getFlows().then(data => {\r\n            if (data.error) {\r\n                console.log(\"error occured\")\r\n            } else {\r\n                setFlowcharts(data)\r\n            }\r\n        })\r\n    };\r\n    const handleClick = (e) => {\r\n        setCurrentFlowChart([])\r\n        // console.log(e.target.value)\r\n        let x = []\r\n        flowcharts.map((fc, i) => {\r\n            // console.log(fc.category === e.target.value)\r\n            if(fc.category === e.target.value){\r\n                x.push(fc)\r\n            }\r\n        })\r\n        setCurrentFlowChart(x)\r\n        // console.log(currentFlowChart)\r\n    }\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, []);\r\n    return (\r\n        <Layout title=\"Welcome to Flowtion\" description=\"..\">\r\n            {isAuthenticated() && isAuthenticated().user.role === 0 &&\r\n                    categories && categories.map((fc, i) => {\r\n                        return (<div key={i}>\r\n        \r\n                            <button key={i} value={fc} onClick={(e) => handleClick(e)} >\r\n                                {fc}\r\n        \r\n                            </button>\r\n                            <br></br>\r\n                            <br></br>\r\n        \r\n                        </div>)\r\n                    })\r\n            }\r\n            {JSON.stringify(currentFlowChart)}\r\n        </Layout>\r\n\r\n    )\r\n}\r\nexport default Home;","C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\core\\Layout.js",[],"C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\user\\Showflow.js",[],"C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\user\\apiHelper.js",[],"C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\auth\\index.js",[],"C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\core\\Menu.js",["79"],"C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\config.js",[],"C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\react-flow-renderer\\index.jsx",[],"C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\react-flow-renderer\\apiUser.js",[],"C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\react-flow-renderer\\Nodes.jsx",[],"C:\\Users\\Krishna\\Desktop\\codathon\\Flowtion\\frontend\\src\\user\\Displayflow.js",["80","81","82","83","84","85","86"],"import React, { useState, useEffect } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport ReactFlow, {\r\n    removeElements,\r\n    updateEdge,\r\n    addEdge,\r\n    Background,\r\n    MiniMap,\r\n    Controls\r\n} from \"react-flow-renderer\";\r\nimport { nodeTypes } from \"../react-flow-renderer/Nodes\";\r\nimport { getFlow } from './apiHelper'\r\nimport Layout from \"../core/Layout\";\r\nconst Displayflow = (props) => {\r\n    const [elements, setElements] = useState(props.elements);\r\n    const [answer, setAnswer] = useState(props.elements);\r\n    const [arr, setArr] = useState([])\r\n    const [flag, setFlag] = useState(false)\r\n    const [activeNode, setActiveNode] = useState();\r\n    const [clicked, setClicked] = useState(false)\r\n    const [newName, setNewName] = useState(\"\");\r\n    const [instance, setInstance] = useState();\r\n\r\n    useEffect(() => {\r\n        console.log(props.elements)\r\n        showCurrentFlow(props.match.params.id)\r\n        if (activeNode) setNewName(activeNode.data.label);\r\n    }, [activeNode]);\r\n\r\n    const connectHandler = (params) => {\r\n        setElements((prev) => addEdge(params, prev));\r\n    };\r\n    const edgeUpdateHandler = (oldEdge, newConnection) =>\r\n        setElements((els) => updateEdge(oldEdge, newConnection, els));\r\n\r\n    const onLoad = (reactFlowInstance) => {\r\n        setInstance(reactFlowInstance);\r\n        reactFlowInstance.fitView();\r\n    };\r\n    const shuffle = (array) => {\r\n        let currentIndex = array.length, randomIndex;\r\n\r\n        // While there remain elements to shuffle...\r\n        while (currentIndex != 0) {\r\n\r\n            // Pick a remaining element...\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex--;\r\n\r\n            // And swap it with the current element.\r\n            [array[currentIndex], array[randomIndex]] = [\r\n                array[randomIndex], array[currentIndex]];\r\n        }\r\n\r\n        return array;\r\n    }\r\n\r\n    var arr1 = []\r\n    const showCurrentFlow = (id) => {\r\n        getFlow(id)\r\n            .then(data => {\r\n                if (data.error) {\r\n\r\n                } else {\r\n                    console.log(data.nodes)\r\n                    setAnswer(data.nodes)\r\n                    let x = data.nodes;\r\n                    let y = []\r\n\r\n                    for (let i of x) {\r\n                        if (i.hasOwnProperty(\"position\")) {\r\n                            y.push(i)\r\n                        }\r\n                        else {\r\n                            let p = arr\r\n                            p.push(i)\r\n                            setArr(p)\r\n                        }\r\n\r\n                    }\r\n                    y = shuffle(y)\r\n                    let z = 0\r\n                    for (let i of y) {\r\n\r\n                        i[\"position\"][\"x\"] = 200\r\n                        i[\"position\"][\"y\"] = 100 * z\r\n                        z++;\r\n                    }\r\n                    setElements(y)\r\n                }\r\n            });\r\n    }\r\n    const saveChangesHandler = () => {\r\n        setClicked(true)\r\n\r\n        if (elements.length !== answer.length)\r\n            console.log(\"wrong answer\")\r\n        else {\r\n\r\n            // for (let ele of answer) {\r\n            //     const index = elements.findIndex((element) => JSON.stringify(element) === JSON.stringify(ele);\r\n            //     if (index === -1)\r\n            //         console.log(\"wrong \")\r\n            // }\r\n            var x = elements\r\n            for (let i of x) {\r\n                if (i.hasOwnProperty(\"position\") === false) {\r\n                    arr1.push(i)\r\n                }\r\n            }\r\n\r\n            arr.sort();\r\n            arr1.sort();\r\n            console.log(arr)\r\n            console.log(arr1)\r\n            let i = 0\r\n\r\n            for (i = 0; i < arr.length; i++) {\r\n\r\n                let src = arr[i][\"source\"]\r\n\r\n                var index = arr1.findIndex((a) => (a[\"source\"] === src))\r\n\r\n                if (arr1[index][\"target\"] !== arr[i][\"target\"]) {\r\n                    console.log(\"wrong answer\")\r\n\r\n                    break;\r\n                }\r\n            }\r\n            if (i == arr.length) {\r\n                console.log(\"correct\")\r\n                setFlag(true)\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    return (\r\n        <Layout title=\"Flowchart\">\r\n            <div\r\n                style={{\r\n                    height: \"75vh\",\r\n                    width: \"75vw\",\r\n                    border: \"1px solid black\",\r\n                    marginLeft: \"12.5vw\"\r\n                }}\r\n            >\r\n\r\n                <ReactFlow\r\n                    elements={elements}\r\n                    onConnect={connectHandler}\r\n                    deleteKeyCode={8 || 46}\r\n                    onEdgeUpdate={edgeUpdateHandler}\r\n                    nodeTypes={nodeTypes}\r\n                    snapToGrid={true}\r\n                    snapGrid={[16, 16]}\r\n                    connectionLineStyle={{ stroke: \"black\", strokeWidth: 2 }}\r\n                    onLoad={onLoad}\r\n                >\r\n                    <Background variant=\"dots\" gap={15} size={2} color=\"#c8c8c8\" />\r\n\r\n                    <MiniMap\r\n                        nodeColor={(node) => {\r\n                            switch (node.type) {\r\n                                case \"rectangle\":\r\n                                    return \"red\";\r\n                                case \"startNode\":\r\n                                    return \"#00ff00\";\r\n                                case \"endNode\":\r\n                                    return \"rgb(0,0,255)\";\r\n                                case \"paraNode\":\r\n                                    return \"rgb(120,120,120)\"\r\n                                default:\r\n                                    return \"#eee\";\r\n                            }\r\n                        }}\r\n                    />\r\n\r\n                    <Controls />\r\n                </ReactFlow>\r\n\r\n\r\n\r\n\r\n                <button type=\"button\" onClick={saveChangesHandler}>\r\n                    Save changes\r\n                </button>\r\n                {\r\n                    flag && <div>\r\n                        correct answer\r\n                    </div>\r\n                }\r\n                {\r\n\r\n                    !flag && clicked && <div>\r\n                        wrong answer\r\n                    </div>\r\n                }\r\n            </div>\r\n\r\n        </Layout >\r\n\r\n    );\r\n};\r\n\r\nexport default withRouter(Displayflow);",{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":3,"column":8,"nodeType":"93","messageId":"94","endLine":3,"endColumn":14},{"ruleId":"95","severity":1,"message":"96","line":114,"column":13,"nodeType":"97","endLine":116,"endColumn":123},{"ruleId":"98","severity":1,"message":"99","line":16,"column":33,"nodeType":"100","messageId":"101","endLine":16,"endColumn":35},{"ruleId":"98","severity":1,"message":"99","line":37,"column":32,"nodeType":"100","messageId":"101","endLine":37,"endColumn":34},{"ruleId":"95","severity":1,"message":"96","line":18,"column":88,"nodeType":"97","endLine":18,"endColumn":218},{"ruleId":"91","severity":1,"message":"102","line":5,"column":5,"nodeType":"93","messageId":"94","endLine":5,"endColumn":19},{"ruleId":"91","severity":1,"message":"103","line":20,"column":24,"nodeType":"93","messageId":"94","endLine":20,"endColumn":37},{"ruleId":"91","severity":1,"message":"104","line":22,"column":12,"nodeType":"93","messageId":"94","endLine":22,"endColumn":19},{"ruleId":"91","severity":1,"message":"105","line":23,"column":12,"nodeType":"93","messageId":"94","endLine":23,"endColumn":20},{"ruleId":"106","severity":1,"message":"107","line":29,"column":8,"nodeType":"108","endLine":29,"endColumn":20,"suggestions":"109"},{"ruleId":"110","severity":1,"message":"111","line":45,"column":29,"nodeType":"112","messageId":"113","endLine":45,"endColumn":31},{"ruleId":"110","severity":1,"message":"114","line":131,"column":19,"nodeType":"112","messageId":"113","endLine":131,"endColumn":21},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"no-unused-vars","'Layout' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'removeElements' is defined but never used.","'setActiveNode' is assigned a value but never used.","'newName' is assigned a value but never used.","'instance' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.elements', 'props.match.params.id', and 'showCurrentFlow'. Either include them or remove the dependency array.","ArrayExpression",["117"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation",{"desc":"118","fix":"119"},"Update the dependencies array to be: [activeNode, props.elements, props.match.params.id, showCurrentFlow]",{"range":"120","text":"121"},[1008,1020],"[activeNode, props.elements, props.match.params.id, showCurrentFlow]"]