[{"C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\index.js":"1","C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\Routes.js":"2","C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\core\\Notfound.js":"3","C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\core\\Home.js":"4","C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\user\\Signin.js":"5","C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\user\\Signup.js":"6","C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\user\\Showflow.js":"7","C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\user\\apiHelper.js":"8","C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\auth\\index.js":"9","C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\config.js":"10","C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\react-flow-renderer\\index.jsx":"11","C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\core\\Menu.js":"12","C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\react-flow-renderer\\apiUser.js":"13","C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\react-flow-renderer\\Nodes.jsx":"14","C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\user\\Displayflow.js":"15","C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\auth\\PrivateRoute.js":"16","C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\user\\Leaderboard.js":"17","C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\user\\ShowLeader.js":"18","C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\user\\ShowFlow1.js":"19"},{"size":227,"mtime":1644567930773,"results":"20","hashOfConfig":"21"},{"size":1534,"mtime":1644931535860,"results":"22","hashOfConfig":"21"},{"size":539,"mtime":1644776080092,"results":"23","hashOfConfig":"21"},{"size":3000,"mtime":1644920098385,"results":"24","hashOfConfig":"21"},{"size":3868,"mtime":1644780546023,"results":"25","hashOfConfig":"21"},{"size":4705,"mtime":1644780555053,"results":"26","hashOfConfig":"21"},{"size":1746,"mtime":1644781877037,"results":"27","hashOfConfig":"21"},{"size":1410,"mtime":1644694172969,"results":"28","hashOfConfig":"21"},{"size":1935,"mtime":1644472999046,"results":"29","hashOfConfig":"21"},{"size":49,"mtime":1644472999046,"results":"30","hashOfConfig":"21"},{"size":8653,"mtime":1644933120283,"results":"31","hashOfConfig":"21"},{"size":2541,"mtime":1644931640524,"results":"32","hashOfConfig":"21"},{"size":457,"mtime":1644588307212,"results":"33","hashOfConfig":"21"},{"size":2929,"mtime":1644933418223,"results":"34","hashOfConfig":"21"},{"size":9009,"mtime":1644781912577,"results":"35","hashOfConfig":"21"},{"size":610,"mtime":1644775671747,"results":"36","hashOfConfig":"21"},{"size":2559,"mtime":1644931429747,"results":"37","hashOfConfig":"21"},{"size":1287,"mtime":1644932906626,"results":"38","hashOfConfig":"21"},{"size":1752,"mtime":1644931411596,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1w6hdk8",{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\index.js",[],["84","85"],"C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\Routes.js",[],"C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\core\\Notfound.js",[],"C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\core\\Home.js",["86","87"],"import { isAuthenticated } from '../auth'\r\nimport { getCategories,getFlows} from \"../user/apiHelper\";\r\nimport { useEffect,useState } from \"react\";\r\nimport ReactFlowRenderer from '../react-flow-renderer';\r\nimport Showflow from '../user/Showflow'\r\nimport Menu from \"./Menu\";\r\nimport { Redirect } from 'react-router-dom';\r\nconst Home = () => {\r\n    const [categories, setCategories] = useState(false)\r\n    const [flowcharts, setFlowcharts] = useState(false)\r\n    const [currentFlowChart, setCurrentFlowChart] = useState([])\r\n    const init = () => {\r\n        getCategories().then(data => {\r\n            if (data.error) {\r\n                console.log(\"error occured\")\r\n            } else {\r\n                \r\n                let mySet1 = new Set()\r\n                data.map((d, i) => {\r\n                    // console.log(d.category)\r\n                    mySet1.add(d.category)\r\n                })\r\n                const array = [...mySet1];\r\n                setCategories(array)\r\n            }\r\n        })\r\n\r\n        getFlows().then(data => {\r\n            if (data.error) {\r\n                console.log(\"error occured\")\r\n            } else {\r\n                setFlowcharts(data)\r\n            }\r\n        })\r\n    };\r\n    const handleClick = (e) => {\r\n        setCurrentFlowChart([])\r\n        // console.log(e.target.value)\r\n        let x = []\r\n        flowcharts.map((fc, i) => {\r\n            // console.log(fc.category === e.target.value)\r\n            if(fc.category === e.target.value){\r\n                x.push(fc)\r\n            }\r\n        })\r\n        setCurrentFlowChart(x)\r\n        // console.log(currentFlowChart)\r\n    }\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, []);\r\n    return (\r\n        <div>\r\n            <Menu></Menu>\r\n            <div>\r\n                {\r\n                    !isAuthenticated() && <Redirect to=\"/signin\"></Redirect>\r\n                }\r\n                {\r\n                    isAuthenticated() && isAuthenticated().user.role === 0 &&\r\n                    categories && categories.map((fc, i) => {\r\n                        return (<div key={i}>\r\n                            <button key={i} value={fc} onClick={(e) => handleClick(e)} >\r\n                                {fc}\r\n                            </button>\r\n                            <br></br>\r\n                            <br></br>\r\n                        </div>)\r\n                    })\r\n                }\r\n                {isAuthenticated() && isAuthenticated().user.role === 1 &&\r\n                    // < Layout\r\n                    //     title=\"Add a flowchart\"\r\n                    //     description=\"\"\r\n                    //     className=\"container col-md-8 offset-md-2\"\r\n                    // >\r\n                        <ReactFlowRenderer />\r\n\r\n                }\r\n                {isAuthenticated() && isAuthenticated().user.role === 0 && \r\n                        <Showflow flow={currentFlowChart}></Showflow>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\user\\Signin.js",["88"],"import { isAuthenticated } from \"../auth\";\r\nimport { useState } from \"react\";\r\nimport { authenticate } from \"../auth\";\r\nimport { signin } from \"../auth\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Menu from '../core/Menu'\r\nimport classes from './Signup.module.css'\r\nconst Signin = () => {\r\n    const [values, setValues] = useState({\r\n        email: 'test@gmail.com',\r\n        password: '$Test123',\r\n        error: '',\r\n        loading: false,\r\n        redirectToReferrer: false\r\n    });\r\n    const { email, password, error, loading, redirectToReferrer } = values;\r\n    const { user } = isAuthenticated()\r\n    const handleChange = name => event => {\r\n        setValues({ ...values, error: false, [name]: event.target.value });\r\n    };\r\n    const clickSubmit = event => {\r\n        event.preventDefault();\r\n        setValues({ ...values, error: false, loading: true });\r\n        signin({ email, password })\r\n            .then(data => {\r\n                if (data.error) {\r\n                    // console.log(data.error.message)\r\n                    if (typeof data.error.message !== 'undefined')\r\n                        setValues({ ...values, error: data.error.message, loading: false })\r\n                    else\r\n                        setValues({ ...values, error: 'Validation failed', success: false });\r\n                } else {\r\n                    authenticate(data, () => {\r\n                        setValues({\r\n                            ...values,\r\n                            redirectToReferrer: true\r\n                        });\r\n                    })\r\n                }\r\n            });\r\n    };\r\n    const signInForm = () => (\r\n        <form>\r\n\r\n            <div className=\"form-group\">\r\n                <label style={{ fontWeight: 'bold', color: '#131D5A' }}>Email</label>\r\n                <input onChange={handleChange('email')} type=\"email\" className=\"form-control\" value={email} />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label style={{ fontWeight: 'bold', color: '#131D5A' }}>Password</label>\r\n                <input onChange={handleChange('password')} type=\"password\" className=\"form-control\" value={password} />\r\n            </div>\r\n            <button onClick={clickSubmit} className={classes.btn}>\r\n                Submit\r\n            </button>\r\n        </form>\r\n    );\r\n\r\n    const showError = () => (\r\n        <div className=\"alert alert-danger\" style={{ display: error ? '' : 'none' }}>\r\n            {error}\r\n        </div>\r\n    );\r\n\r\n    const showLoading = () => (\r\n        loading && (<div className=\"alert alert-info\">\r\n            <h2>Loading...</h2>\r\n        </div>)\r\n    );\r\n\r\n    const redirectUser = () => {\r\n        if (redirectToReferrer) {\r\n            //console.log(user & user.role===1)\r\n            if (user && user.role === 1) {\r\n                return <Redirect to=\"/\" />;\r\n            } else {\r\n                return <Redirect to=\"/\" />;\r\n            }\r\n        }\r\n    }\r\n\r\n    return (<div ><Menu>  </Menu>\r\n        <div style={{\r\n            width: '100%',\r\n            height: '100%',\r\n            backgroundColor: 'rgba(5, 0, 255, 0.4)',\r\n            display: 'flex',\r\n            flexWrap: 'wrap'\r\n        }}>\r\n            <img style={{\r\n                marginTop: '10%', marginLeft: '15%', marginRight: '12%', borderRadius: '290px'\r\n            }} height=\"200px\" src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ7Mvq2MGMEzWXPTUfqbqgtlUazwyoOYpB7lA&usqp=CAU\"></img>\r\n\r\n            <div className={classes.rform}>\r\n                {showLoading()}\r\n                {showError()}\r\n                <div style={{ color: '#131D5A', paddingBottom: '20px' }}>            <h1 >Signin !</h1>\r\n                </div>\r\n                {signInForm()}\r\n                {redirectUser()}\r\n            </div>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Signin;","C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\user\\Signup.js",["89"],"import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { signup, authenticate } from '../auth';\r\nimport classes from './Signup.module.css'\r\nimport Menu from '../core/Menu';\r\nconst Signup = () => {\r\n    const [values, setValues] = useState({\r\n        name: '',\r\n        email: '',\r\n        password: '',\r\n        error: '',\r\n        loading: false,\r\n        redirectToReferrer: false\r\n    });\r\n    const [retype, setRetype] = useState('')\r\n\r\n    const { name, email, password, loading, error, redirectToReferrer } = values;\r\n\r\n    const handleChange = name => event => {\r\n        setValues({ ...values, error: false, [name]: event.target.value });\r\n    };\r\n\r\n    const handlePassword = name => event => {\r\n        if (password === event.target.value) {\r\n            setValues({ ...values, error: false });\r\n            setRetype(event.target.value)\r\n        }\r\n        else {\r\n            setValues({ ...values, error: 'Passwords dont match' });\r\n            setRetype(event.target.value)\r\n        }\r\n    };\r\n\r\n    const clickSubmit = event => {\r\n        event.preventDefault();\r\n        if (!error) {\r\n            setValues({ ...values, error: false, loading: true });\r\n            signup({ name, email, password }).then(data => {\r\n                //console.log(data)\r\n                if (data.error) {\r\n                    //console.log(data.error)\r\n                    if (typeof data.error.message !== 'undefined')\r\n                        setValues({ ...values, error: data.error.message, loading: false })\r\n                    else\r\n                        setValues({ ...values, error: 'Validation failed', success: false });\r\n                } else {\r\n                    authenticate(data, () => {\r\n                        setValues({\r\n                            ...values,\r\n                            redirectToReferrer: true,\r\n\r\n                        });\r\n                    })\r\n                }\r\n            });\r\n        }\r\n\r\n    };\r\n\r\n    const signUpForm = () => (\r\n        <form>\r\n            <div className=\"form-group\">\r\n                <label style={{ fontWeight: 'bold', color: '#131D5A' }} >Name</label>\r\n                <input onChange={handleChange('name')} type=\"text\" className=\"form-control\" value={name} style={{ marginBottom: '15px' }} />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label style={{ fontWeight: 'bold', color: '#131D5A' }} >Email</label>\r\n                <input onChange={handleChange('email')} type=\"email\" className=\"form-control\" value={email} style={{ marginBottom: '15px' }} />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label style={{ fontWeight: 'bold', color: '#131D5A' }} >Password</label>\r\n                <input onChange={handleChange('password')} type=\"password\" className=\"form-control\" value={password} style={{ marginBottom: '15px' }} />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label style={{ fontWeight: 'bold', color: '#131D5A' }} >Retype Password</label>\r\n                <input onChange={handlePassword()} type=\"password\" className=\"form-control\" value={retype} style={{ marginBottom: '15px' }} />\r\n            </div>\r\n\r\n            <button onClick={clickSubmit} className={classes.btn}>\r\n                Submit\r\n            </button>\r\n        </form>\r\n    );\r\n\r\n    const showError = () => (\r\n        <div className=\"alert alert-danger\" style={{ display: error ? '' : 'none' }}>\r\n            {error}\r\n        </div>\r\n    );\r\n\r\n    const showLoading = () => (\r\n        loading && <div className=\"alert alert-info\" >\r\n            Loading...\r\n        </div>\r\n    );\r\n    const redirectUser = () => {\r\n        if (redirectToReferrer) {\r\n            return <Redirect to=\"/\" />\r\n        }\r\n    }\r\n    return (<div><Menu>  </Menu>\r\n        <div style={{\r\n            width: '100%',\r\n            height: '100%',\r\n            backgroundColor: 'rgba(5, 0, 255, 0.4)',\r\n            display: 'flex',\r\n            flexWrap: 'wrap'\r\n        }}>\r\n\r\n            <img style={{\r\n                marginTop: '10%', marginLeft: '15%', marginRight: '12%', borderRadius: '290px'\r\n            }} height=\"200px\" src=\"https://eligeeducar.cl/content/uploads/2021/10/un-astronauto-viendo-un-documental.jpg\"></img>\r\n\r\n            < div className={classes.rform} >\r\n                <div style={{ color: '#131D5A', paddingBottom: '20px' }}>            <h1 >Register!</h1>\r\n                </div>\r\n\r\n                {showLoading()}\r\n                {showError()}\r\n                {signUpForm()}\r\n            </div>\r\n            {redirectUser()}\r\n        </div >\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Signup;","C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\user\\Showflow.js",["90"],"//user side show flow charts of certain category\r\n\r\nimport { useState, useEffect } from \"react\"\r\nimport { getFlows, getFlow } from \"./apiHelper\";\r\nimport { withRouter } from \"react-router-dom\";\r\nconst Showflow = (props) => {\r\n    const [flowcharts, setFlowcharts] = useState(false)\r\n    const [currentFlowChart, setCurrentFlowChart] = useState(false)\r\n    const init = () => {\r\n        getFlows().then(data => {\r\n            if (data.error) {\r\n                console.log(\"error occured\")\r\n            } else {\r\n                setFlowcharts(data)\r\n            }\r\n        })\r\n    };\r\n    useEffect(() => {\r\n        init();\r\n\r\n    }, []);\r\n    const handleClick = (e) => {\r\n\r\n        getFlow(e.target.value).then(data => {\r\n            if (data.error) {\r\n                console.log(\"error occured\")\r\n            } else {\r\n                setCurrentFlowChart(data)\r\n                console.log(currentFlowChart)\r\n                props.history.push(`/display/${data._id}`)\r\n            }\r\n            //  console.log(e.target.value)\r\n            //console.log(\"clicked \")\r\n        })\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <br></br>\r\n            <br></br>\r\n            Showing flowcharts\r\n            {/* {JSON.stringify(flowcharts)} */}\r\n            {props.flow && props.flow.map((fc, i) => {\r\n                return (<div key={i}>\r\n\r\n                    <button key={i} value={fc._id} onClick={(e) => handleClick(e)}>\r\n                        {fc.name}\r\n\r\n                    </button>\r\n                    <br></br>\r\n                    <br></br>\r\n\r\n                </div>)\r\n            })}\r\n            {/* {currentFlowChart && JSON.stringify(currentFlowChart)} */}\r\n        </div>\r\n    )\r\n}\r\nexport default withRouter(Showflow)","C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\user\\apiHelper.js",[],"C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\auth\\index.js",[],"C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\config.js",[],"C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\react-flow-renderer\\index.jsx",["91"],"C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\core\\Menu.js",["92"],"C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\react-flow-renderer\\apiUser.js",[],"C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\react-flow-renderer\\Nodes.jsx",[],"C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\user\\Displayflow.js",["93","94","95","96","97","98","99"],"//user side flowchart playground to find correct flowchart\r\n\r\nimport { useStopwatch } from 'react-timer-hook';\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Menu from \"../core/Menu\"\r\nimport ReactFlow, {\r\n    removeElements,\r\n    updateEdge,\r\n    addEdge,\r\n    Background,\r\n    MiniMap,\r\n    Controls\r\n} from \"react-flow-renderer\";\r\nimport { nodeTypes } from \"../react-flow-renderer/Nodes\";\r\nimport { getFlow, sendTimeData } from './apiHelper'\r\nconst Displayflow = (props) => {\r\n    const [elements, setElements] = useState([]);\r\n    const [answer, setAnswer] = useState([]);\r\n    const [arr, setArr] = useState([])\r\n    const [flag, setFlag] = useState(false)\r\n    const [activeNode, setActiveNode] = useState();\r\n    const [clicked, setClicked] = useState(false)\r\n    const [newName, setNewName] = useState(\"\");\r\n    const [instance, setInstance] = useState();\r\n    const [time,setTime] = useState(1000)\r\n    const [data,setData] = useState(false)\r\n    const [button,setButton] = useState(false)\r\n    const [penal,setPenal]  = useState(0)\r\n    const [leader,setLeader]  = useState([])\r\n    const {\r\n        seconds,\r\n        minutes,\r\n      } = useStopwatch({ autoStart: true });\r\n\r\n    useEffect(() => {\r\n        console.log(props.elements)\r\n        showCurrentFlow(props.match.params.id)\r\n        if (activeNode) setNewName(activeNode.data.label);\r\n    }, [activeNode]);\r\n\r\n    const connectHandler = (params) => {\r\n        setElements((prev) => addEdge(params, prev));\r\n    };\r\n    const edgeUpdateHandler = (oldEdge, newConnection) =>\r\n        setElements((els) => updateEdge(oldEdge, newConnection, els));\r\n\r\n    const onLoad = (reactFlowInstance) => {\r\n        setInstance(reactFlowInstance);\r\n        reactFlowInstance.fitView();\r\n    };\r\n    const shuffle = (array) => {\r\n        let currentIndex = array.length, randomIndex;\r\n\r\n        // While there remain elements to shuffle...\r\n        while (currentIndex != 0) {\r\n\r\n            // Pick a remaining element...\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex--;\r\n\r\n            // And swap it with the current element.\r\n            [array[currentIndex], array[randomIndex]] = [\r\n                array[randomIndex], array[currentIndex]];\r\n        }\r\n\r\n        return array;\r\n    }\r\n\r\n    var arr1 = []\r\n    const showCurrentFlow = (id) => {\r\n        getFlow(id)\r\n            .then(data => {\r\n                if (data.error) {\r\n\r\n                } else {\r\n                    setData(data)\r\n                    setTime(data.best_time)\r\n                    console.log(data)\r\n                    setAnswer(data.nodes)\r\n                    let x = data.nodes;\r\n                    let y = []\r\n                    let q = []\r\n                    for (let i of x) {\r\n                        if (i.hasOwnProperty(\"position\") ) {\r\n                            y.push(i)\r\n                        }\r\n                        else if(i[\"flg\"] === 1){\r\n                            console.log(i)\r\n                            q = elements\r\n                            q.push(i)\r\n                            \r\n                        }\r\n                        else {\r\n                            let p = arr\r\n                            p.push(i)\r\n                            setArr(p)\r\n                        }\r\n\r\n                    }\r\n                    y = shuffle(y)\r\n                    let z = 0\r\n                    for (let i of y) {\r\n                        \r\n                        i[\"position\"][\"x\"] = 0\r\n                        i[\"position\"][\"y\"] = 100 * z\r\n                        z++;\r\n                    }\r\n                    for(let i=0;i<q.length;i++){\r\n                        y.push(q[i])\r\n                    }\r\n                    console.log(y)\r\n                    setElements(y)\r\n\r\n                }\r\n            });\r\n    }\r\n    const saveChangesHandler = () => {\r\n        setClicked(true)\r\n\r\n        if (elements.length !== answer.length)\r\n            console.log(\"wrong answer\")\r\n        else {\r\n\r\n            // for (let ele of answer) {\r\n            //     const index = elements.findIndex((element) => JSON.stringify(element) === JSON.stringify(ele);\r\n            //     if (index === -1)\r\n            //         console.log(\"wrong \")\r\n            // }\r\n            var x = elements\r\n            for (let i of x) {\r\n                if (i.hasOwnProperty(\"position\") === false) {\r\n                    arr1.push(i)\r\n                }\r\n            }\r\n\r\n            arr.sort();\r\n            arr1.sort();\r\n            console.log(arr)\r\n            console.log(arr1)\r\n            let i = 0\r\n\r\n            for (i = 0; i < arr.length; i++) {\r\n\r\n                let src = arr[i][\"source\"]\r\n\r\n                var index = arr1.findIndex((a) => (a[\"source\"] === src))\r\n\r\n                if (arr1[index][\"target\"] !== arr[i][\"target\"]) {\r\n                    console.log(\"wrong answer\")\r\n\r\n                    break;\r\n                }\r\n            }\r\n            if (i == arr.length) {\r\n                console.log(\"correct\")\r\n                setFlag(true)\r\n                let w = minutes*60+seconds+penal\r\n                let u = data.leaderboard\r\n                let r = JSON.parse(localStorage.getItem('jwt')).user[\"name\"]\r\n                u.push({name:r,time:w})\r\n                let o = {\r\n                    leaderboard:u\r\n                }\r\n                sendTimeData(props.match.params.id,o).then(data => {\r\n                    console.log(data)\r\n                    \r\n                    console.log(time>w)\r\n                    if(time>w){\r\n                        setTime(w)\r\n                        let g = {\r\n                            best_time:w,\r\n                            best_name:JSON.parse(localStorage.getItem('jwt')).user[\"name\"]\r\n                        }\r\n                        sendTimeData(props.match.params.id,g).then(data => {\r\n                            console.log(data)\r\n                        })\r\n                    }      \r\n                })\r\n            }\r\n        }\r\n\r\n    };\r\n    const buttonHandler = () =>{\r\n        setButton(true)\r\n        alert(\"You will be penalized\")\r\n        console.log(minutes)\r\n        setPenal(10)\r\n    }\r\n    const leaderHandler = () =>{\r\n        setLeader(data.leaderboard)\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <Menu></Menu>\r\n            <h3>\r\n                Best Score: {data && data.best_time}<br></br>\r\n                By:{data && data.best_name}\r\n            </h3>\r\n      <h1 style={{marginLeft:'85%'}}>\r\n          <span>{minutes}</span>:<span>{seconds}</span>\r\n      </h1>\r\n      <button onClick={leaderHandler}>Show Leaderboard</button>\r\n      {\r\n         JSON.stringify(leader) }\r\n      <br></br><br></br>\r\n      <button onClick={buttonHandler}>Show Hint</button>\r\n      {button && data.hint}\r\n            <div\r\n                style={{\r\n                    height: \"90vh\",\r\n                    width: \"75vw\",\r\n                    border: \"1px solid black\",\r\n                    marginLeft: \"12.5vw\"\r\n                }}\r\n            >\r\n\r\n                <ReactFlow\r\n                    elements={elements}\r\n                    onConnect={connectHandler}\r\n                    deleteKeyCode={8 || 46}\r\n                    onEdgeUpdate={edgeUpdateHandler}\r\n                    nodeTypes={nodeTypes}\r\n                    snapToGrid={true}\r\n                    snapGrid={[16, 16]}\r\n                    connectionLineStyle={{ stroke: \"black\", strokeWidth: 2 }}\r\n                    onLoad={onLoad}\r\n                >\r\n                    <Background variant=\"dots\" gap={15} size={2} color=\"#c8c8c8\" />\r\n\r\n                    <MiniMap\r\n                        nodeColor={(node) => {\r\n                            switch (node.type) {\r\n                                case \"rectangle\":\r\n                                    return \"red\";\r\n                                case \"startNode\":\r\n                                    return \"#00ff00\";\r\n                                case \"endNode\":\r\n                                    return \"rgb(0,0,255)\";\r\n                                case \"paraNode\":\r\n                                    return \"rgb(120,120,120)\"\r\n                                default:\r\n                                    return \"#eee\";\r\n                            }\r\n                        }}\r\n                    />\r\n\r\n                    <Controls />\r\n                </ReactFlow>\r\n\r\n\r\n\r\n\r\n                <button type=\"button\" onClick={saveChangesHandler}>\r\n                    Save changes\r\n                </button>\r\n                {\r\n                    flag && <div>\r\n                        correct answer\r\n                    </div>\r\n                }\r\n                {\r\n\r\n                    !flag && clicked && <div>\r\n                        wrong answer\r\n                    </div>\r\n                }\r\n            </div>\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(Displayflow);","C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\auth\\PrivateRoute.js",[],"C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\user\\Leaderboard.js",["100","101","102","103","104","105","106"],"C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\user\\ShowLeader.js",["107"],"C:\\Users\\Admin\\Flowtion\\Flowtion\\frontend\\src\\user\\ShowFlow1.js",["108"],{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":19,"column":33,"nodeType":"115","messageId":"116","endLine":19,"endColumn":35},{"ruleId":"113","severity":1,"message":"114","line":40,"column":32,"nodeType":"115","messageId":"116","endLine":40,"endColumn":34},{"ruleId":"117","severity":1,"message":"118","line":91,"column":13,"nodeType":"119","endLine":93,"endColumn":137},{"ruleId":"117","severity":1,"message":"118","line":113,"column":13,"nodeType":"119","endLine":115,"endColumn":123},{"ruleId":"120","severity":1,"message":"121","line":7,"column":12,"nodeType":"122","messageId":"123","endLine":7,"endColumn":22},{"ruleId":"120","severity":1,"message":"124","line":10,"column":3,"nodeType":"122","messageId":"123","endLine":10,"endColumn":13},{"ruleId":"117","severity":1,"message":"118","line":18,"column":51,"nodeType":"119","endLine":18,"endColumn":181},{"ruleId":"120","severity":1,"message":"125","line":8,"column":5,"nodeType":"122","messageId":"123","endLine":8,"endColumn":19},{"ruleId":"120","severity":1,"message":"126","line":22,"column":24,"nodeType":"122","messageId":"123","endLine":22,"endColumn":37},{"ruleId":"120","severity":1,"message":"127","line":24,"column":12,"nodeType":"122","messageId":"123","endLine":24,"endColumn":19},{"ruleId":"120","severity":1,"message":"128","line":25,"column":12,"nodeType":"122","messageId":"123","endLine":25,"endColumn":20},{"ruleId":"129","severity":1,"message":"130","line":40,"column":8,"nodeType":"131","endLine":40,"endColumn":20,"suggestions":"132"},{"ruleId":"133","severity":1,"message":"134","line":56,"column":29,"nodeType":"135","messageId":"136","endLine":56,"endColumn":31},{"ruleId":"133","severity":1,"message":"137","line":155,"column":19,"nodeType":"135","messageId":"136","endLine":155,"endColumn":21},{"ruleId":"120","severity":1,"message":"138","line":1,"column":10,"nodeType":"122","messageId":"123","endLine":1,"endColumn":25},{"ruleId":"120","severity":1,"message":"139","line":4,"column":8,"nodeType":"122","messageId":"123","endLine":4,"endColumn":25},{"ruleId":"120","severity":1,"message":"140","line":5,"column":8,"nodeType":"122","messageId":"123","endLine":5,"endColumn":16},{"ruleId":"120","severity":1,"message":"141","line":7,"column":10,"nodeType":"122","messageId":"123","endLine":7,"endColumn":18},{"ruleId":"120","severity":1,"message":"142","line":8,"column":8,"nodeType":"122","messageId":"123","endLine":8,"endColumn":18},{"ruleId":"113","severity":1,"message":"114","line":22,"column":33,"nodeType":"115","messageId":"116","endLine":22,"endColumn":35},{"ruleId":"113","severity":1,"message":"114","line":43,"column":32,"nodeType":"115","messageId":"116","endLine":43,"endColumn":34},{"ruleId":"129","severity":1,"message":"143","line":9,"column":8,"nodeType":"131","endLine":9,"endColumn":10,"suggestions":"144"},{"ruleId":"120","severity":1,"message":"121","line":7,"column":12,"nodeType":"122","messageId":"123","endLine":7,"endColumn":22},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'flowcharts' is assigned a value but never used.","Identifier","unusedVar","'Background' is defined but never used.","'removeElements' is defined but never used.","'setActiveNode' is assigned a value but never used.","'newName' is assigned a value but never used.","'instance' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.elements', 'props.match.params.id', and 'showCurrentFlow'. Either include them or remove the dependency array.","ArrayExpression",["147"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'isAuthenticated' is defined but never used.","'ReactFlowRenderer' is defined but never used.","'Showflow' is defined but never used.","'Redirect' is defined but never used.","'ShowLeader' is defined but never used.","React Hook useEffect has a missing dependency: 'props.match.params.id'. Either include it or remove the dependency array.",["148"],"no-global-assign","no-unsafe-negation",{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},"Update the dependencies array to be: [activeNode, props.elements, props.match.params.id, showCurrentFlow]",{"range":"153","text":"154"},"Update the dependencies array to be: [props.match.params.id]",{"range":"155","text":"156"},[1422,1434],"[activeNode, props.elements, props.match.params.id, showCurrentFlow]",[341,343],"[props.match.params.id]"]